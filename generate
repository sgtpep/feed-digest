#!/usr/bin/env python
import os
import re
import sqlite3
import glob
import collections
import datetime
import codecs
import cgi
import urlparse
import urllib

import config

if __name__ == '__main__':
    connection = sqlite3.connect(config.DB_PATH, detect_types=sqlite3.PARSE_DECLTYPES)
    connection.row_factory = sqlite3.Row
    cursor = connection.cursor()

    cursor.execute("""
    SELECT (strftime('%s', added) - 1 + :interval) / :interval * :interval AS group_timestamp, *
    FROM entries
    WHERE added >= date('now', :period)
    ORDER BY group_timestamp DESC, feed_number, added DESC, number
    """, {'interval': config.GROUP_INTERVAL, 'period': '-' + config.GENERATE_PERIOD})
    entries = cursor.fetchall()

    if not os.path.exists(config.OUTPUT_DIR):
        os.makedirs(config.OUTPUT_DIR)

    index_path = os.path.join(config.OUTPUT_DIR, "index.html")
    index_html = open(index_path).read()
    matches = re.search(r"""^<b><a href="(.+?)">""", index_html, flags=re.M)
    prev_group_filename = matches.group(1) if matches else None

    html_paths = glob.glob(os.path.join(config.OUTPUT_DIR, "*.html"))
    for html_path in html_paths:
        os.remove(html_path)

    header_html = u"""\
    <!DOCTYPE html>
    <html>
    <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{0}</title>
    <style>
    body {{
      margin: 25px;
      font-family: sans-serif;
      line-height: 1.6;
    }}
    h1 {{
      font-size: 1.5em;
      line-height: 1em;
    }}
    h2 {{
      font-size: 1em;
      margin: 0.3em 0;
    }}
    a {{
      color: inherit;
      text-decoration: none;
    }}
    a:visited {{
      color: dimgrey;
    }}
    b > a:visited {{
      color: inherit;
    }}
    {2}
    </style>
    </head>
    <body>
    <h1>{1}</h1>
    """
    page_title = u"Feeds Digest"

    feed_lines = open(config.URLS_PATH).read().strip().splitlines()
    feed_lines = [l.rstrip().split(None, 1) for l in feed_lines if not l.lstrip().startswith('#')]
    feed_titles = dict(l for l in feed_lines if len(l) > 1)

    def escape(string):
        return string.replace('<', "&lt;").replace('>', "&gt;")

    now = datetime.datetime.now()
    groups = []
    prev_entry = collections.defaultdict(lambda: None)
    prev_group_datetime = None
    for entry in entries:
        if entry['group_timestamp'] != prev_entry['group_timestamp']:
            group_datetime = datetime.datetime.utcfromtimestamp(entry['group_timestamp'])
            group_filename = group_datetime.strftime("%Y-%m-%d-%H-%M") + ".html"
            group_path = os.path.join(config.OUTPUT_DIR, group_filename)
            f = codecs.open(group_path, 'w', encoding='utf8')
            group_header = group_datetime.strftime("%a %-d %b %-H:%M")
            group_title = u"{} &mdash; {}".format(group_header, page_title)
            print >> f, header_html.format(group_title, group_header, '')

            if group_datetime <= now:
                print >> f, u"""<!--#exec cmd="sed -i 's|^<b>\(.*\)</b>$|\\1|; s|^\(<a href=\\"{}\\".*\)$|<b>\\1</b>|' \${{SCRIPT_FILENAME%/*}}/index.html; :" -->""".format(group_filename)

            if not prev_group_datetime or group_datetime.year != prev_group_datetime.year or group_datetime.month != prev_group_datetime.month or group_datetime.day != prev_group_datetime.day:
                prev_group_datetime = group_datetime
                groups.append([])
            groups[len(groups) - 1].append((group_datetime, group_filename))

            prev_entry = collections.defaultdict(lambda: None)

        if entry['feed_url'] != prev_entry['feed_url']:
            feed_title = feed_titles.get(entry['feed_url']) or entry['feed_title']
            print >> f, u"""<h2>{}</h2>""".format(escape(feed_title))

        url = entry['url']
        parsed_url = urlparse.urlparse(url)
        if parsed_url.query:
            query = urlparse.parse_qs(parsed_url.query)
            filtered_query = dict((k, v) for k, v in query.iteritems() if not k.startswith('utm_'))
            if query != filtered_query:
                query = urllib.urlencode(filtered_query, doseq=True)
                parsed_url = parsed_url._replace(query=query)
                url = parsed_url.geturl()
        print >> f, u"""<div><a href="{}" rel="noreferrer">{}</a></div>""".format(url, escape(entry['title']))

        prev_entry = entry

    f = codecs.open(index_path, 'w', encoding='utf8')
    page_style = u"""
    a {
      margin-right: 0.5em;
    }
    """
    print >> f, header_html.format(page_title, page_title, page_style)

    for subgroups in groups:
        group_datetime = subgroups[0][0]
        print >> f, u"""<h2>{}</h2>""".format(group_datetime.strftime("%a %-d %b"))

        for group_datetime, group_filename in reversed(subgroups):
            link_text = group_datetime.strftime("%-H:%M")
            if group_datetime > now:
                group_filename += '?' + now.strftime("%s")
                link_text = u"""<i>{}</i>""".format(link_text)
            group_html = u"""<a href="{}">{}</a>""".format(group_filename, link_text)
            if group_filename == prev_group_filename:
                group_html = u"<b>{}</b>".format(group_html)
            print >> f, group_html

    print >> f, u"""
    <script>
    (function() {
    var links = document.getElementsByTagName('a');
    Array.prototype.forEach.call(links, function(link) {
      link.addEventListener('click', function() {
        var activeLink = document.querySelector("b > a");
        if (activeLink) {
          var activeLinkWrapper = activeLink.parentNode;
          activeLink.parentNode.parentNode.insertBefore(activeLink, activeLink.parentNode);
          activeLinkWrapper.parentNode.removeChild(activeLinkWrapper);
        }
        var linkWrapper = document.createElement('b');
        var isLinkActive = link === document.activeElement;
        link.parentNode.insertBefore(linkWrapper, link);
        linkWrapper.appendChild(link);
        if (isLinkActive) link.focus();
      });
    });
    })();
    </script>
    """

    stats_path = os.path.join(config.OUTPUT_DIR, "stats.html")
    f = codecs.open(stats_path, 'w', encoding='utf8')
    stats_header = u"Stats"
    stats_title = u"{} &mdash; {}".format(stats_header, page_title)
    print >> f, header_html.format(stats_title, stats_header, '')

    cursor.execute("""
    SELECT max(published), count(*), feed_url, feed_title
    FROM entries
    GROUP BY feed_url
    ORDER BY published
    """)
    feeds = cursor.fetchall()

    print >> f, u"""
    <table cellspacing="5">
    <tr>
    <th>Last Published</th>
    <th align="right">Count</th>
    <th align="left">Feed</th>
    </tr>
    """
    for last_published, count, feed_url, feed_title in feeds:
        print >> f, u"<tr>"
        print >> f, u"""<td>{}</td>""".format(last_published)
        print >> f, u"""<td align="right">{:d}</td>""".format(count)
        feed_title = feed_titles.get(feed_url) or feed_title
        print >> f, u"""<td><a href="{}" rel="noreferrer">{}</a></td>""".format(feed_url, escape(feed_title))
        print >> f, u"</tr>"
    print >> f, u"</table>"
